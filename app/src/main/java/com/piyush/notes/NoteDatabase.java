package com.piyush.notes;

import androidx.room.Database;
import androidx.room.RoomDatabase;

// in order to use the NoteDao we are creating this class
// @Database is an annotation that specifies that this is the database, or sort of entry point for all of the data access objects (DAO) which our app is going to use
//entity -> here we can specify the list of all Data Access Objects (DAO) which we are going to use
/* abstract is somewhere between class & interface. In abstract class we can have some methods that have bodies and definitions and also some methods that don't have any bodies.
And when we extend an abstract class, we have access to all those methods that are defined and have a body, and we are required to implement these other methods that are marked as abstract.
Its like an interface that requires us to sign this contract to implement some set of methods, but like a class it also has some functionality already so we can call some other classes.
So by saying abstract in front of a method, thats how we indicate that this isnt something that I'm going to implement myself, instead this is going to be implemented by somebody else. */
@Database(entities = {Note.class}, version = 1)
public abstract class NoteDatabase extends RoomDatabase {
    // reason this is abstract coz Room library is going to generate some code. So the class that implements or extends this abstract class is going to be generated by Room library.
    // this @Database annotation is what is going to tell the compiler to generate some code that can be used.
    // we created this abstract method that someone else is going to implement for me to get access to an instance of that data access object
    public abstract NoteDao noteDao();
}
